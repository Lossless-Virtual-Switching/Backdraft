"""
BKDRFT Slow Receiver Experiment
The pipline used to configure bess will be generate from this file.
Some variable will be add to the generated file in the specified section.
"""

# == parameters:
BESS = 0
BKDRFT = 1
BESS_BP = 2
BESS_PFQ = 3

# These variables may be overrided
AGENT = BESS
BP = 0
PFQ = 0
COMMAND_Q = 0
ECNT=32000
LOSSLESS = 0
RATE =  100000

CNT_Q = 8

# == Insert here ==
# ==     End     ==

RATE_LIMIT = BP # BP or OVerlay

TX_QUEUE_COUNT = CNT_Q
RX_QUEUE_COUNT = CNT_Q
Q_SIZE = 64
Q = max(TX_QUEUE_COUNT, RX_QUEUE_COUNT)
# ======================================

count_vsw_cores = 2
for i in range(count_vsw_cores):
    bess.add_worker(i, i)

_next_wid = -1
def next_wid():
    global _next_wid
    _next_wid += 1
    _next_wid = _next_wid % count_vsw_cores
    return _next_wid


# Server 1
#eth_vhost0
host0 = BDVPort(
  name='ex_vhost0',
  port_name='ex_vhost0',
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=RATE_LIMIT,
  rate=RATE)

# Client
host1 = BDVPort(
  name='ex_vhost1',
  port_name='ex_vhost1',
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=RATE_LIMIT,
  rate=RATE)

client2 = BDVPort(
  name='ex_vhost3',
  port_name='ex_vhost3',
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=RATE_LIMIT,
  rate=RATE)

client3 = BDVPort(
  name='ex_vhost4',
  port_name='ex_vhost4',
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=RATE_LIMIT,
  rate=RATE)

# Server 2
host2 = BDVPort(
  name='ex_vhost2',
  port_name='ex_vhost2',
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=RATE_LIMIT,
  rate=RATE)

clients = [host1, client2, client3]
servers = [host0, host2]

def bkdrft_pipeline():
    """
    Setup pipeline with bkdrft modules and configure
    modules as wanted.

    Configuration Schema:

    [client] --> [ip lookup] ____|- (10.*.*.*) -> [server_1]
                                 |- (192.*.*.*)-> [server_2]
    """
    print('cnt q:', CNT_Q, 'pfq:', PFQ, 'cdq:', COMMAND_Q, 'lossless:',
          LOSSLESS, 'bp:', BP)
    router = IPLookup()
    router.add(prefix='10.10.1.3', prefix_len=32, gate=1)
    router.add(prefix='10.10.1.4', prefix_len=32, gate=2)

    receive_side_x = Demultiplex(ranges=[
        {'start': 1000, 'end': 2000, 'gate': 1},
        {'start': 8000, 'end': 9000, 'gate': 2},
        {'start': 9001, 'end': 9090, 'gate': 3},
    ])

    loop = CNT_Q
    if COMMAND_Q:
        loop = 1

    queue_ids = [i for i in range(CNT_Q)]

    for i in range(loop):
        if not COMMAND_Q:
          queue_ids = [i]
        for i, h in enumerate(clients, start=1):
            qin = BKDRFTQueueInc(port=h,
                qid=queue_ids, backpressure=BP, cdq=COMMAND_Q, overlay=False)
            qin -> router
            qin.attach_task(wid=next_wid())

            qout = BKDRFTQueueOut(port=h, qid=queue_ids, backpressure=BP,
                lossless=LOSSLESS, cdq=COMMAND_Q, per_flow_buffering=PFQ,
                ecn_threshold=ECNT, overlay=False, mname='client{}'.format(i))
            receive_side_x:i -> qout
            qout.attach_task(wid=next_wid())

        for i, h in enumerate(servers, start=1):
            qin = BKDRFTQueueInc(port=h,
                qid=queue_ids, backpressure=BP, cdq=COMMAND_Q, overlay=False)
            qin -> receive_side_x
            qin.attach_task(wid=next_wid())

            qout = BKDRFTQueueOut(port=h, qid=queue_ids, backpressure=BP,
                lossless=LOSSLESS, cdq=COMMAND_Q, per_flow_buffering=PFQ,
                ecn_threshold=ECNT, overlay=False, mname='server{}'.format(i))
            router:i -> qout
            qout.attach_task(wid=next_wid())


if AGENT == BESS:
    bkdrft_pipeline()

elif AGENT == BKDRFT:
    bkdrft_pipeline()

elif AGENT == BESS_BP:
    # client_qin -> iplookup -> server1_qout(/2)
    BP = 1  # Backpressure is on
    COMMAND_Q = 0 # No command queueing
    PFQ = 0
    bkdrft_pipeline()

elif AGENT == BESS_PFQ:
    COMMAND_Q = 0
    PFQ = 1
    bkdrft_pipeline()
else:
    print("AGENT misconfigured")
    raise Exception()

