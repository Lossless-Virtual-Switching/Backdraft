import os
import json
import subprocess



config = json.load(open('/tmp/.pipeline_config.json'))

count_cores = config['count_core']
count_queue = config['count_queue']
pci = config['pci_address']
count_vhost_ports = config['vhost_port_count']
server = config['server']

drop_prob = 0
if os.environ.get("DROP"):
  drop_prob = float(os.environ.get("DROP"))
  print("Drop Prob {}".format(drop_prob))


# generating vhost port:
vhost_ports = []
for i in range(count_vhost_ports):
  name = 'port_{}'.format(i)
  socket = '/tmp/vhost_{}.sock'.format(i)
  vdev = 'eth_vhost{},iface={},queues={}'.format(i, socket, count_queue)

  if os.path.exists(socket):
    subprocess.call('sudo rm {}'.format(socket), shell=True)

  port = PMDPort(name=name, vdev=vdev, num_inc_q=count_queue, num_out_q=count_queue)
  vhost_ports.append(port)

bess.add_worker(0, 0)
bess.add_worker(1, 1)


# PCI port
print(pci, count_queue)
pci_port = PMDPort(pci=pci, num_inc_q=count_queue, num_out_q=count_queue)


print(drop_prob)
if drop_prob > 0:
    drop = RandomSplit(drop_rate=drop_prob, gates=[0,])
    QueueInc(port=vhost_ports[0], qid=0)-> drop
    drop:0 -> QueueOut(port=pci_port, qid=0)
    QueueInc(port=pci_port, qid=0) -> QueueOut(port=vhost_ports[0], qid=0)
else:
    if server:
        # Egress
        merger = Merge()
        print(len(vhost_ports), count_vhost_ports)
        for index,i in enumerate(vhost_ports):
          qin1 = QueueInc(port=i, qid=0)
          qin1.attach_task(wid=0)
          qin1 -> merger

        pci_port_qout = QueueOut(port=pci_port, qid=0)
        merger -> pci_port_qout

        # Ingress
        hs = HashLB(mode='l3', gates=range(count_vhost_ports))
        pci_port_qinc = QueueInc(port=pci_port, qid=0)
        pci_port_qinc -> MeasurePPS() -> hs 
        pci_port_qinc.attach_task(wid=1)
        for i in range(count_vhost_ports):
            qout1 = QueueOut(port=vhost_ports[i], qid=0)
            hs:i -> qout1
            
        # One server setup
        # QueueInc(port=vhost_ports[0], qid=0) -> QueueOut(port=pci_port, qid=0)
        # QueueInc(port=pci_port, qid=0) -> QueueOut(port=vhost_ports[0], qid=0)
    else: 
        # client
        # Egress
        merger = Merge()
        print(len(vhost_ports), count_vhost_ports)
        for index, i in enumerate(vhost_ports):
          qin1 = QueueInc(port=i, qid=0)
          qin1.attach_task(wid=0)
          qin1 -> merger
        
        pci_port_qout = QueueOut(port=pci_port, qid=0)
        merger -> pci_port_qout
    
        # Ingress
        iplookup = IPLookup()
        qin1 = QueueInc(port=pci_port, qid=0)
        qin1 -> iplookup
        qin1.attach_task(wid=1)

        for i in range(count_vhost_ports):
          ip = "192.168.1.{}".format(i + 2)
          print("pipline ip in IP Look UP: ", ip)
          iplookup.add(prefix=ip, prefix_len=32, gate=i)
          qout1 = QueueOut(port=vhost_ports[i], qid=0)
          iplookup:i -> qout1
        
        iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=count_vhost_ports) 
        iplookup:count_vhost_ports -> Sink()



# # Outgress
# merger = Merge()
# for i in vhost_ports:
#   qin1 = QueueInc(port=i, qid=0)
#   qin1 -> merger
# 
# pci_port_qout = QueueOut(port=pci_port, qid=0)
# merger -> pci_port_qout
# # -------------------
# 
# # fw::ACL(rules=[{'src_ip': '192.168.1.9/32', 'drop': False}])
# # fw::ACL(rules=[{'src_ip': '192.168.1.0/24', 'drop': False}])
# 
# #Ingress
# 
# switch = L2Forward()
# 
# 
# iplookup = IPLookup()
# qin1 = QueueInc(port=pci_port, qid=0)
# qin1 -> VLANPop() -> switch:0 -> iplookup
# 
# 
# if server:
#   switch.add(entries=[{'addr': "1c:34:da:41:c7:14", 'gate': 0}])
#   iplookup.add(prefix="192.168.1.9", prefix_len=32, gate=0) 
#   iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=1) 
#   
#   # iplookup:0 -> VLANPush() -> QueueOut(port=vhost_ports[0], qid=0)
#   iplookup:0 -> VLANPush() -> QueueOut(port=vhost_ports[0], qid=0)
#   iplookup:1 -> Sink()
#   
# else:
#   switch.add(entries=[{'addr': "1c:34:da:41:ce:f4", 'gate': 0}])
#   for i in range(count_vhost_ports):
#     ip = "192.168.1.{}".format(i + 1)
#     print(ip)
#     iplookup.add(prefix=ip, prefix_len=32, gate=i)
#     qout1 = QueueOut(port=vhost_ports[i], qid=0)
#     # iplookup:i -> VLANPush() -> qout1
#     iplookup:i -> VLANPush() -> qout1
# 
#   iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=count_vhost_ports) 
#   iplookup:count_vhost_ports -> Sink()

# -------------------


#This only works single core for now. This statically maps bess on core 0
# bess.add_worker(0, 0)


# # ports = []
# cpu_id = 0
# for i in range(0, 2 * count_cores, 2):
#   # cpu 0-count_cores are for BESS
#   bess.add_worker(cpu_id, cpu_id)
# 
#   name = 'port_{}'.format(i)
#   socket = '/tmp/vhost_{}.sock'.format(i)
#   vdev = 'eth_vhost{},iface={},queues={}'.format(i, socket, count_queue)
# 
#   if os.path.exists(socket):
#     subprocess.call('sudo rm {}'.format(socket), shell=True)
# 
#   port = PMDPort(name=name, vdev=vdev, num_inc_q=count_queue, num_out_q=count_queue, rate_limiting=0)
# 
# 
#   # port2
#   j = i + 1
#   name = 'port_{}'.format(j)
#   socket = '/tmp/vhost_{}.sock'.format(j)
#   vdev = 'eth_vhost{},iface={},queues={}'.format(j, socket, count_queue)
# 
#   if os.path.exists(socket):
#     subprocess.call('sudo rm {}'.format(socket), shell=True)
# 
#   port2 = PMDPort(name=name, vdev=vdev, num_inc_q=count_queue, num_out_q=count_queue, rate_limiting=0)
# 
#   # ports.append(port)
# 
#   # qin1 = QueueInc(port=port, qid=0)
#   qout1 = QueueOut(port=port, qid=0)
# 
#   qin2 = QueueInc(port=port2, qid=0)
#   # qout2 = QueueOut(port=port2, qid=0)
# 
#   # qin1 -> qout2
#   # qin2 -> qout1
#   qin2 -> Sink()
# 
#   # qin1.attach_task(wid=cpu_id)
#   qin2.attach_task(wid=cpu_id)
#   cpu_id += 1

