"""
BESS Pipeline Configuration For Server Node
"""


import os
import subprocess


prio = 3
dei = 1
vlan = 100

victim_server_ip_prefix = '172.17.8.0'
victim_server_prefix_len = 24 

tas_socket = '/tmp/tas_server.sock'
count_tas_queues = 3
size_q = 64

out_pci = '07:00.1' # eno50 # TODO: This is hardcoded. Find a better way.


# Make sure socket file is removed
if os.path.exists(tas_socket):
	# os.remove(tas_socket)
        subprocess.call('sudo rm {}'.format(tas_socket), shell=True)
        print('previous socket file removed')


# Get current node ip
def get_ip_address():
        p = subprocess.Popen('ip addr show eno50', shell=True, stdout=subprocess.PIPE)
        res, _ = p.communicate()
        add = res.decode().strip().split()
        index = add.index('inet')
        add = add[index+1].split('/')[0].strip()
        print('node ip:', add)
        return add


current_node_ip = get_ip_address()


# Get clan TCI
def get_tci(prio, dei, vlanid):
        assert prio < 8
        assert dei < 2
        assert vlanid < 2 ** 12
        res = prio
        res <<= 1
        res |= dei
        res <<= 12
        res |= vlanid
        return res


tci = get_tci(prio, dei, vlan)
       


# This port is used for connecting TAS
vdev = 'eth_vhost0,iface={},queues={}'.format(tas_socket, count_tas_queues)
tas_port = PMDPort(name='tas_server',
	vdev=vdev,
	num_inc_q=count_tas_queues,
	num_out_q=count_tas_queues,
	size_inc_q=size_q,
	size_out_q=size_q) 


# PCI of port connected to switch
sw_port = PMDPort(pci=out_pci)


# Pipeline
tas_q_inc = QueueInc(port=tas_port.name, qid=0)
tas_q_out = QueueOut(port=tas_port.name, qid=0)
sw_q_inc = QueueInc(port=sw_port.name, qid=0)
sw_q_out = QueueOut(port=sw_port.name, qid=0)
router = IPLookup()

router.add(prefix='0.0.0.0', prefix_len=0, gate=0)
router.add(prefix=current_node_ip, prefix_len=32, gate=0)
router.add(prefix='192.168.0.0', prefix_len=16, gate=1)  # drop packets with same netid which is not for this destination
router.add(prefix=victim_server_ip_prefix,
	prefix_len=victim_server_prefix_len,
	gate=1)


# Tx
# tas_q_inc -> VLANPush(tci=tci) -> sw_q_out
tas_q_inc -> sw_q_out

# Rx
# sw_q_inc -> VLANPop() -> router
sw_q_inc -> router
router:0 -> tas_q_out 
router:1 -> Sink()
