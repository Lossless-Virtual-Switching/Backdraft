"""
Static Partitioning Pipeline Configuration For BESS
"""
import os
import sys
import yaml
import subprocess
import scapy.all as scapy
import json


# pipeline config
config = json.load(open('.pipeline_config.json'))

out_pci = config['pci']
count_queue = config['count_queue']
count_tas_queues = count_queue
size_q = config['queue_size']
add_vlan = config['add_vlan']
vsw_cores = config['virtual_switch_cores']
if vsw_cores < 1:
  print('virtual switch cores can not be less than 1', file=sys.stdout)

if config['cdq'] or config['bp'] or config['pfq'] or config['buffering']:
  raise Exception('This pipeline only supports pure bess. There is another '
                  'pipeline script available for Backdraft features which has '
                  'similar pipeline structure')


# Add virtual switch workers
for i in range(vsw_cores):
  bess.add_worker(i, i)

# Load cluster config file
# this configuration defines the shape of the cluster
# more specificly, how many instance is running on each node and what are
# their configurations
config_file = config['cluster_config_file']


# Define some function for reading cluster config
def get_mac_address():
  """
  Get current device MAC address
  """
  # config is a global variable
  cmd = 'cat /sys/class/net/%s/address' % config["interface"]
  p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
  res, _ = p.communicate()
  add = res.decode().strip()
  return add


def get_pci_address(iface):
  """
  Get PCI address for the given interface name
  """
  # ethtool -i iface # this should give enough information
  raise Exception('Not implemented yet')


def get_current_node_info(file_path):
  mac = get_mac_address()
  found = False
  host_name = None
  host_info = None
  with open(file_path) as f:
    config = yaml.load(f)
    for key in config.keys():
      if key == 'connections':
        continue
      item = config[key]
      if item['mac'] == mac:
        host_name = key
        host_info = item
        found = True
        break
  return host_name, host_info


def get_tci(prio, dei, vlan_id):
  tci = prio << 13 | 0 << 12 | vlan_id
  return tci


_next_wid = -1
def next_wid():
  global _next_wid
  _next_wid = (_next_wid + 1) % vsw_cores
  return _next_wid


# Get configuration for the running machine
host_name, info =  get_current_node_info(config_file)
if host_name is None:
  raise Exception('This node has not been configured!')
instances = info.get('instances', [])
count_instances = len(instances)


# ===========================================#
#                  Pipeline
# ===========================================#


# PCI of port connected to switch
nic_req_queues = count_instances * count_queue
if nic_req_queues > 64:
  raise Exception('more than 64 queues of the NIC is needed. '
                  'It is not supported')

nic_port = PMDPort(pci=out_pci, num_inc_q=nic_req_queues,
                   num_out_q=nic_req_queues, rate_limiting=False, rate=40000,
                   size_inc_q=size_q,
                   size_out_q=size_q,
                   command_queue=False, data_mapping=False)


# TAS vhost ports
vhosts = []
next_free_port = 0
for i, instance in enumerate(instances):
  name = 'tas_{}_{}'.format(instance['type'], i)
  tas_socket = '/tmp/{}.sock'.format(name)

  # make sure previous socket file is removed
  if os.path.exists(tas_socket):
    # os.remove(tas_socket)
    subprocess.call('sudo rm {}'.format(tas_socket), shell=True)
    print('previous socket file removed')

  vdev = 'eth_vhost{},iface={},queues={}'.format(i, tas_socket, count_tas_queues)
  tas_port = PMDPort(name=name,
    vdev=vdev,
    num_inc_q=count_tas_queues,
    num_out_q=count_tas_queues,
    size_inc_q=size_q,
    size_out_q=size_q,
    rate_limiting=False, # rate_limit
    rate=40000)

  managed_ports = [p for p in
                         range(next_free_port, next_free_port + count_queue)]
  next_free_port += count_queue
  vhosts.append((tas_port, managed_ports))


for i, (vhost, nic_queues) in enumerate(vhosts):
  vhost_queues = [j for j in range(count_queue)]
  # Tx
  for vq, nq in zip(vhost_queues, nic_queues):
    vhost_inc = QueueInc(port=vhost, qid=vq)
    vhost_inc.attach_task(wid=next_wid())
    nic_out = QueueOut(port=nic_port, qid=nq)
    vhost_inc -> nic_out

  # Rx
  for vq, nq in zip(vhost_queues, nic_queues):
    nic_inc = QueueInc(port=nic_port, qid=nq)
    nic_inc.attach_task(wid=next_wid())
    vhost_out = QueueOut(port=vhost, qid=vq)
    nic_inc -> vhost_out

