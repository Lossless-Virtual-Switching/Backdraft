"""
General Pipeline Configuration

This pipeline supports all features of Backdraft, But, does not scale well.
Backdraft static partitioning concept should be added for scalability.
"""
import os
import sys
import yaml
import subprocess
import scapy.all as scapy
import json


# pipeline config
config = json.load(open('pipeline_config.json'))

out_pci = config['pci']
count_queue = config['count_queue']
count_tas_queues = count_queue
size_q = config['queue_size']
add_vlan = config['add_vlan']
vsw_cores = config['virtual_switch_cores']
if vsw_cores < 1:
  print('virtual switch cores can not be less than 1', file=sys.stdout)


# Add virtual switch workers
for i in range(1, vsw_cores, 2):
  bess.add_worker(i, i)

# Load cluster config file
# this configuration defines the shape of the cluster
# more specificly, how many instance is running on each node and what are
# their configurations
config_file = config['cluster_config_file']


# Define some function for reading cluster config
def get_hostname():
    cmd = 'hostname'
    try:
      res = subprocess.check_output(cmd, shell=True)
      name = res.decode().strip()
      return name
    except:
        return None


def get_mac_address():
  """
  Get current device MAC address
  """
  # config is a global variable
  cmd = 'cat /sys/class/net/%s/address' % config["interface"]
  p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
  res, _ = p.communicate()
  add = res.decode().strip()
  return add


def get_current_node_info(file_path):
  hostname = get_hostname()
  found = False
  host_name = None
  host_info = None
  with open(file_path) as f:
    config = yaml.load(f, Loader=yaml.FullLoader)
    for key in config.keys():
      if key == 'connections':
        continue
      item = config[key]
      if item['hostname'] == hostname:
        host_name = key
        host_info = item
        found = True
        break
  return host_name, host_info


def get_tci(prio, dei, vlan_id):
  tci = prio << 13 | 0 << 12 | vlan_id
  return tci

_next_wid = -1
def next_wid():
  global _next_wid
  _next_wid = (_next_wid + 1) % vsw_cores
  return _next_wid


# Get configuration for the running machine
host_name, info =  get_current_node_info(config_file)
if host_name is None:
  raise Exception('This node has not been configured!')
instances = info.get('instances', [])
count_instances = len(instances)

# Backdraft related pipeline flags
bp = config['bp']
buffering = config['buffering']
cdq = config['cdq']
pfq = config['pfq']
overlay = config['overlay']

cpu_queues = size_q
rate = 40000


# ===========================================#
#                  Pipeline
# ===========================================#


# L2 Switch
# l2fwd = L2Forward()
# l2fwd.set_default_gate(gate=0)


# PCI of port connected to switch
sw_port = PMDPort(pci=out_pci, num_inc_q=count_queue, num_out_q=count_queue,
           rate_limiting=overlay, rate=rate, data_mapping=cdq)


# TAS vhost ports
vhosts = []
l2fwd_entries = []
for i, instance in enumerate(instances):
  name = 'tas_{}_{}'.format(instance['type'], i)
  tas_socket = '/tmp/{}.sock'.format(name)

  # make sure previous socket file is removed
  if os.path.exists(tas_socket):
    # os.remove(tas_socket)
    rc = subprocess.call('sudo rm {}'.format(tas_socket), shell=True)
    if rc != 0:
      print('failed to remove socket {}'.format(tas_socket), file=sys.stderr)
      sys.exit(1)
    print('previous socket file removed')

  vdev = 'eth_vhost{},iface={},queues={}'.format(i, tas_socket, count_tas_queues)
  tas_port = PMDPort(name=name,
    vdev=vdev,
    num_inc_q=count_tas_queues,
    num_out_q=count_tas_queues,
    size_inc_q=size_q,
    size_out_q=size_q * 4,
    rate_limiting=overlay,
    rate=rate)

  # print(type(str(tas_port.mac_addr)), str(tas_port.mac_addr))
  l2fwd_entries.append({'addr': str(tas_port.mac_addr), 'gate': i + 1})

  ip = info['ip']
  if 'ip' in instance:
    ip = instance['ip']
  ip = ip.strip()
  vhosts.append((tas_port, ip))


# Update L2 Switch Table
# print(l2fwd_entries)
# l2fwd.add(entries=l2fwd_entries)
# # use replicate to broadcast unknow packets (like arp)
# rep = Replicate(gates=[i + 1 for i in range(len(vhosts))])
# l2fwd:0 -> rep


queue_ids = list(range(count_queue))
sw_merge = Merge()
if not cdq:
  # each queue should be polled
  for i in range(count_queue):
    sw_q_inc = BKDRFTQueueInc(port=sw_port, qid=[i], cdq=cdq,
                              backpressure=bp, overlay=overlay)
    sw_q_inc -> sw_merge:i
    sw_q_inc.attach_task(wid=next_wid())
else:
  # only doorbell queue should be polled
  sw_q_inc = BKDRFTQueueInc(port=sw_port, qid=queue_ids,
                            cdq=cdq, backpressure=bp, overlay=overlay)
  sw_q_inc -> sw_merge:0
  sw_q_inc.attach_task(wid=next_wid())

# Backdraft queue out can manage multiple queue
sw_q_out = BKDRFTQueueOut(port=sw_port, qid=queue_ids,
              backpressure=bp, lossless=buffering,
              cdq=cdq, per_flow_buffering=pfq, mname='sw', overlay = overlay)
# if buffering:
#   sw_q_out.attach_task(wid=next_wid())

merge = Merge() # merge input
x = IPLookup()
x.add(prefix='0.0.0.0', prefix_len=0, gate=0)
rep = Replicate(gates=[i + 1 for i in range(len(vhosts))])
x:0 -> rep

x.add(prefix='10.10.0.0', prefix_len=16, gate=8000)
x:8000 -> Sink()

# ACL for filtering unwanted packets
# rules = [ {'src_ip': '192.168.9.50', 'dst_ip':'',
#            'src_port':10001, 'dst_port':8080,
#            'drop':True},]
# acl = ACL(rules=rules)


# Tx
gate = 0
lookup_gate = 1
for i, (vhost, ip) in enumerate(vhosts):
  if not cdq:
    # each queue should be polled
    for j in range(count_queue):
      qinc = BKDRFTQueueInc(port=vhost, qid=[j], cdq=cdq,
                            backpressure=bp, overlay=overlay)
      qinc -> merge:gate
      gate += 1
      qinc.attach_task(wid=next_wid())
  else:
    # only dorbell queue should be polled
    qinc = BKDRFTQueueInc(port=vhost, qid=queue_ids,
                          cdq=cdq, backpressure=bp, overlay=overlay)
    qinc -> merge:gate
    gate += 1
    qinc.attach_task(wid=next_wid())
  if ip is not None:
    print(ip, ' : ', lookup_gate)
    x.add(prefix=ip, prefix_len=32, gate=lookup_gate)
    lookup_gate += 1


# if requested, add vlan tag to the transmitting packets
tmp_queue = Queue(size=cpu_queues)
if add_vlan:
  push_vlan = VLANPush(tci=get_tci(3, 0, 100))
  merge -> push_vlan -> tmp_queue -> sw_q_out
else:
  merge -> tmp_queue -> sw_q_out
tmp_queue.attach_task(wid=next_wid())


#TODO: if two instance have the same ip we will have problems
# Rx

# if requested remove vlan from incoming packets
tmp_queue = Queue(size=cpu_queues)
if add_vlan:
  pop_vlan = VLANPop()
  # sw_merge -> pop_vlan -> l2fwd
  sw_merge -> pop_vlan -> tmp_queue -> x
  # sw_merge -> pop_vlan -> acl -> x
else:
  sw_merge -> tmp_queue -> x
  # sw_merge -> l2fwd
tmp_queue.attach_task(wid=next_wid())


lookup_gate = 1
for i, (vhost, ip) in enumerate(vhosts):
  qout = BKDRFTQueueOut(port=vhost, qid=queue_ids,
               backpressure=bp, lossless=buffering,
               cdq=cdq, per_flow_buffering=pfq, mname=vhost.name + '_' + str(i),
               overlay=overlay)
  # if buffering:
  #   qout.attach_task(wid=next_wid())
  if ip:
    x:lookup_gate -> qout
    lookup_gate += 1

  gate = i + 1
  # l2fwd:gate -> qout
  rep:gate -> qout

# HARD CODED BURST GENERATOR
# import scapy.all as scapy

# if host_name in ('node5', 'node2'):
#   payload_size = 100
#   pps = 1.0e6
#   if host_name == 'node2':
#     pps = 0.8e6
#     payload_size = 1400
#   src_mac = info['mac']
#   dst_mac = '98:f2:b3:cc:02:c1' # TODO: this should be read from config file
#   src_ip = '192.168.9.50'  # this ip should be dropped in vsw
#   dst_ip = '192.168.1.41'  # TODO: this should be read from config
#   eth = scapy.Ether(src=src_mac, dst=dst_mac)
#   ip = scapy.IP(src=src_ip, dst=dst_ip)
#   tcp = scapy.TCP(sport=10001, dport=8080, seq=134)
#   payload = 'a' * payload_size
#   pkt = bytes(eth/ip/tcp/payload)
#
#   src::FlowGen(template=pkt, pps=pps, flow_rate=800, flow_duration=1.0, \
#       arrival='exponential', duration='pareto', quick_rampup=True) -> merge

# FOR ALL INSTANCES
# x.add(prefix='192.168.9.50', prefix_len=32, gate=8000)

