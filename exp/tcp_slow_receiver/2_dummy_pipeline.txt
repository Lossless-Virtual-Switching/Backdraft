"""
Pipeline high level overview
Send:
           [d1]        [d1]
            ^           |
[c1] -      |           V
      |-> [agg_c]  [c_s_iplookup] -|-> [s1]
[c2] -                             |-> [s2]

Receive:
           [d2]        [d2]
            ^           |
[s1] -      |           V
      |-> [agg_s]  [s_s_iplookup] -|-> [c1]
[s2] -                             |-> [c2]
"""
import os
import subprocess

def del_socket(path):
  if os.path.exists(path):
     subprocess.call('sudo rm %s' % path, shell=True)

Q = 8

bp = 0
cdq = 0
pfq = 0
lossless = 0
delay_per_packet = 0

# == Insert here ==
# =================

RX_QUEUE_COUNT = Q
TX_QUEUE_COUNT = Q
Q_SIZE = 4096

rate_limit = bp
rate = 100000  # kilo pkt / sec

print('number of queues: ', Q)


# Add worker to bess
bess.add_worker(0, 0)


del_socket('tmp_vhost/tas_server_1.sock')
del_socket('tmp_vhost/tas_server_2.sock')
del_socket('tmp_vhost/tas_client_1.sock')
del_socket('tmp_vhost/tas_client_2.sock')
del_socket('tmp_vhost/tas_dummy_1.sock')
del_socket('tmp_vhost/tas_dummy_2.sock')


# Define PMDPorts
server1 = PMDPort(
  name='tas_server_1',
  vdev='eth_vhost0,iface=tmp_vhost/tas_server_1.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)

server2 = PMDPort(
  name='tas_server_2',
  vdev='eth_vhost1,iface=tmp_vhost/tas_server_2.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)

client1 = PMDPort(
  name='tas_client_1',
  vdev='eth_vhost2,iface=tmp_vhost/tas_client_1.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)

client2 = PMDPort(
  name='tas_client_2',
  vdev='eth_vhost3,iface=tmp_vhost/tas_client_2.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)

dummy1 = PMDPort(
  name='tas_dummy_1',
  vdev='eth_vhost4,iface=tmp_vhost/tas_dummy_1.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)

dummy2 = PMDPort(
  name='tas_dummy_2',
  vdev='eth_vhost5,iface=tmp_vhost/tas_dummy_2.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE,
  rate_limiting=rate_limit,
  rate=rate)


# plumbing the bidirectional path
aggregate_client = Merge()
client_side_iplookup = IPLookup()
client_side_iplookup.add(prefix='10.10.0.1', prefix_len=32, gate=1)  # should match with container
client_side_iplookup.add(prefix='10.10.0.2', prefix_len=32, gate=2)  # should match with container
client_side_iplookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)  # should match with container
crepeater = Replicate(gates=[1, 2])

aggregate_server = Merge()
server_side_iplookup = IPLookup()
server_side_iplookup.add(prefix='172.17.0.1', prefix_len=32, gate=1)  # should match with container
server_side_iplookup.add(prefix='172.17.0.2', prefix_len=32, gate=2)  # should match with container
server_side_iplookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)  # should match with container
srepeater = Replicate(gates=[1, 2])

queue_ids = list(range(Q))
server_1_out = BKDRFTQueueOut(port=server1, qid=queue_ids,
  backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
  mname='server1', overlay=False)

server_2_out = BKDRFTQueueOut(port=server2, qid=queue_ids,
  backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
  mname='server2', overlay=False)

client_1_out = BKDRFTQueueOut(port=client1, qid=queue_ids,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='client1', overlay=False)

client_2_out = BKDRFTQueueOut(port=client2, qid=queue_ids,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='client2', overlay=False)

dummy_1_out = BKDRFTQueueOut(port=dummy1, qid=queue_ids,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='dummy1', overlay=False)

dummy_2_out = BKDRFTQueueOut(port=dummy2, qid=queue_ids,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='dummy2', overlay=False)

if not cdq:
    # poll other queues
    for i in range(0, Q):
        # client
        BKDRFTQueueInc(port=client1, qid=[i], backpressure=bp, cdq=cdq) -> aggregate_client
        BKDRFTQueueInc(port=client2, qid=[i], backpressure=bp, cdq=cdq) -> aggregate_client
        # server
        BKDRFTQueueInc(port=server1, qid=[i], backpressure=bp, cdq=cdq) -> aggregate_server
        BKDRFTQueueInc(port=server2, qid=[i], backpressure=bp, cdq=cdq) -> aggregate_server
        # dummy
        BKDRFTQueueInc(port=dummy1, qid=[i], backpressure=bp, cdq=cdq) -> client_side_iplookup
        BKDRFTQueueInc(port=dummy2, qid=[i], backpressure=bp, cdq=cdq) -> server_side_iplookup
else:
    # client
    BKDRFTQueueInc(port=client1, qid=queue_ids, backpressure=bp, cdq=cdq) -> aggregate_client
    BKDRFTQueueInc(port=client2, qid=queue_ids, backpressure=bp, cdq=cdq) -> aggregate_client
    # server
    BKDRFTQueueInc(port=server1, qid=queue_ids, backpressure=bp, cdq=cdq) -> aggregate_server
    BKDRFTQueueInc(port=server2, qid=queue_ids, backpressure=bp, cdq=cdq) -> aggregate_server
    # dummy
    BKDRFTQueueInc(port=dummy1, qid=queue_ids, backpressure=bp, cdq=cdq) -> client_side_iplookup
    BKDRFTQueueInc(port=dummy2, qid=queue_ids, backpressure=bp, cdq=cdq) -> server_side_iplookup




"""
Send:
          [d1_1]     [d1_1]
            ^           |
[c1] -      |           V
      |-> [agg_c]  [c_s_iplookup] -|-> [s1]
[c2] -                             |-> [s2]

Receive:
          [d1_2]     [d1_2]
            ^           |
[s1] -      |           V
      |-> [agg_s]  [s_s_iplookup] -|-> [c1]
[s2] -                             |-> [c2]

"""

aggregate_client -> dummy_1_out
client_side_iplookup:1 -> server_1_out
client_side_iplookup:2 -> server_2_out
client_side_iplookup:0 -> crepeater
crepeater:1 -> server_1_out
crepeater:2 -> server_2_out

aggregate_server -> dummy_2_out
server_side_iplookup:1 -> client_1_out
server_side_iplookup:2 -> client_2_out
server_side_iplookup:0 -> srepeater
srepeater:1 -> client_1_out
srepeater:2 -> client_2_out

