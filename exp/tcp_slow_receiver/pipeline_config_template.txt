import os
import subprocess

def del_socket(path):
  if os.path.exists(path):
     subprocess.call('sudo rm %s' % path, shell=True)

Q = 8

bp = 0
cdq = 0
pfq = 0
lossless = 0
delay_per_packet = 0

# == Insert here ==
# =================

RX_QUEUE_COUNT = Q
TX_QUEUE_COUNT = Q
Q_SIZE = 64

print('number of queues: ', Q)


# Add worker to bess
bess.add_worker(0, 0)


del_socket('tmp_vhost/tas_server_1.sock')
del_socket('tmp_vhost/tas_server_2.sock')
del_socket('tmp_vhost/tas_client_1.sock')
del_socket('tmp_vhost/tas_client_2.sock')


# Define PMDPorts
server1 = PMDPort(
  name='tas_server_1',
  vdev='eth_vhost0,iface=tmp_vhost/tas_server_1.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE)

server2 = PMDPort(
  name='tas_server_2',
  vdev='eth_vhost1,iface=tmp_vhost/tas_server_2.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE)

client1 = PMDPort(
  name='tas_client_1',
  vdev='eth_vhost2,iface=tmp_vhost/tas_client_1.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE)

client2 = PMDPort(
  name='tas_client_2',
  vdev='eth_vhost3,iface=tmp_vhost/tas_client_2.sock,queues={}'.format(Q),
  num_inc_q=TX_QUEUE_COUNT,
  num_out_q=RX_QUEUE_COUNT,
  size_inc_q=Q_SIZE,
  size_out_q=Q_SIZE)


# plumbing the bidirectional path
aggregate = Merge()
client_side_iplookup = IPLookup()
client_side_iplookup.add(prefix='10.10.0.1', prefix_len=32, gate=1)  # should match with container
client_side_iplookup.add(prefix='10.10.0.2', prefix_len=32, gate=2)  # should match with container
client_side_iplookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)  # should match with container
crepeater = Replicate(gates=[1, 2])

server_side_iplookup = IPLookup()
server_side_iplookup.add(prefix='172.17.0.1', prefix_len=32, gate=1)  # should match with container
server_side_iplookup.add(prefix='172.17.0.2', prefix_len=32, gate=2)  # should match with container
server_side_iplookup.add(prefix='0.0.0.0', prefix_len=0, gate=0)  # should match with container
srepeater = Replicate(gates=[1, 2])

aggregate_server = Merge()

server_1_out = BKDRFTQueueOut(port=server1, qid=0, count_queues=Q,
  backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
  mname='server1', overlay=False)
# server_1_out = QueueOut(port=server1, qid=0)

server_2_out = BKDRFTQueueOut(port=server2, qid=0, count_queues=Q,
  backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
  mname='server2', overlay=False)
# server_2_out = QueueOut(port=server2, qid=0)

# if cdq:
client_1_out = BKDRFTQueueOut(port=client1, qid=0, count_queues=Q,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='client1', overlay=False)
# else:
#     client_1_out = QueueOut(port=client1, qid=0)

# if cdq:
client_2_out = BKDRFTQueueOut(port=client2, qid=0, count_queues=Q,
    backpressure=bp, lossless=lossless, cdq=cdq, per_flow_buffering=pfq,
    mname='client2', overlay=False)
# else:
#     client_2_out = QueueOut(port=client2, qid=0)

# client
BKDRFTQueueInc(port=client1, qid=0, backpressure=bp, cdq=cdq) -> aggregate
BKDRFTQueueInc(port=client2, qid=0, backpressure=bp, cdq=cdq) -> aggregate


aggregate -> client_side_iplookup
client_side_iplookup:1 -> server_1_out
client_side_iplookup:2 -> server_2_out
client_side_iplookup:0 -> crepeater
crepeater:1 -> server_1_out
crepeater:2 -> server_2_out


# server
BKDRFTQueueInc(port=server1, qid=0, backpressure=bp, cdq=cdq) -> aggregate_server
BKDRFTQueueInc(port=server2, qid=0, backpressure=bp, cdq=cdq) ->aggregate_server 


if not cdq:
    # poll other queues
    for i in range(1, Q):
        BKDRFTQueueInc(port=client1, qid=i, backpressure=bp, cdq=cdq) -> aggregate
        BKDRFTQueueInc(port=client2, qid=i, backpressure=bp, cdq=cdq) -> aggregate
        BKDRFTQueueInc(port=server1, qid=i, backpressure=bp, cdq=cdq) -> aggregate_server
        BKDRFTQueueInc(port=server2, qid=i, backpressure=bp, cdq=cdq) -> aggregate_server


aggregate_server -> server_side_iplookup
server_side_iplookup:1 -> client_1_out
server_side_iplookup:2 -> client_2_out
server_side_iplookup:0 -> srepeater
srepeater:1 -> client_1_out
srepeater:2 -> client_2_out

