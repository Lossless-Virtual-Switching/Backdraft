import os
import json
import subprocess

config = json.load(open('/tmp/.pipeline_config.json')) 
count_cores = config['count_core']
count_queue = config['count_queue']
pci = config['pci_address']
count_vhost_ports = config['vhost_port_count']
server = config['server']

PAUSE_MAGIC_GATE = 1

drop_prob = 0
if os.environ.get("DROP"):
  drop_prob = float(os.environ.get("DROP"))
  print("Drop Prob {}".format(drop_prob))


# generating vhost port:
vhost_ports = []
for i in range(count_vhost_ports):
  name = 'port_{}'.format(i)
  socket = '/tmp/vhost_{}.sock'.format(i)
  # vdev = 'eth_vhost{},iface={},queues={}'.format(i, socket, count_queue)
  vdev = 'eth_vhost{},iface={},queues={}'.format(i, socket, 1)

  if os.path.exists(socket):
    subprocess.call('sudo rm {}'.format(socket), shell=True)

  # port = PMDPort(name=name, vdev=vdev, num_inc_q=count_queue, num_out_q=count_queue)
  print(vdev)
  port = PMDPort(name=name, vdev=vdev, num_inc_q=1, num_out_q=1)
  vhost_ports.append(port)

worker_divisor = 32
core_id = -1

for i in range(worker_divisor):
  bess.add_worker(i, i)

def get_next_core():
  global core_id
  # print("core id", core_id)
  core_id = core_id + 1
  return core_id%worker_divisor


# PCI port
print(pci, count_queue, count_vhost_ports)
pci_port = PMDPort(pci=pci, num_inc_q=count_queue, num_out_q=count_queue + 1)


print(drop_prob)
if drop_prob > 0:
    drop = RandomSplit(drop_rate=drop_prob, gates=[0,])
    BPQInc(port=vhost_ports[0], qid=0)-> drop
    drop:0 -> BPQOut(port=pci_port, qid=0)
    BPQInc(port=pci_port, qid=0) -> BPQOut(port=vhost_ports[0], qid=0)
else:
    if server:
        # Egress
        assert(count_queue == count_vhost_ports)
        print(len(vhost_ports), count_vhost_ports)
        for index,i in enumerate(vhost_ports):
          qin1 = BPQInc(port=i, qid=0)
          worker_id = get_next_core()
          qin1.attach_task(wid=worker_id)
          # qin1 -> merger
          pci_port_qout = BPQOut(port=pci_port, qid=index)
          # worker_id = get_next_core()
          pci_port_qout.attach_task(wid=worker_id)
          qin1 -> pci_port_qout

        # pci_port_qout.attach_task(wid=0)
        # merger -> pci_port_qout

        # Ingress
        for i in range(count_vhost_ports):
            qout1 = BPQOut(port=vhost_ports[i], qid=0)
            worker_id = get_next_core()
            qout1.attach_task(wid=worker_id)
            pci_port_qinc = BPQInc(port=pci_port, qid=i)
            pci_port_qinc.set_overlay_port(port=pci_port.name, qid=count_queue)
            pci_port_qinc -> qout1
            # worker_id = get_next_core()
            pci_port_qinc.attach_task(wid=worker_id)
    else: 
        # client
        # Egress
  

        egress_out_collection = [] # overlay
        assert(count_queue == count_vhost_ports)
        print(len(vhost_ports), count_vhost_ports)
        for index, i in enumerate(vhost_ports):
          qin1 = BPQInc(port=i, qid=0)
          pci_port_qout = BPQOut(port=pci_port, qid=index)
          egress_out_collection.append(pci_port_qout) # overlay
          qin1 -> pci_port_qout
          worker_id = get_next_core()
          qin1.attach_task(wid=worker_id)
          # worker_id = get_next_core()
          pci_port_qout.attach_task(wid=worker_id)

        # Ingress
        iplookup = IPLookup()
        broker = OBroker() # overlay

        for i in range(count_vhost_ports):
            inspector = OInspect()
            inspector.set_overlay_broker(overlay_broker_mod=broker.name)
            qin1 = BPQInc(port=pci_port, qid=i)
            # qin1 -> iplookup
            qin1 -> inspector -> iplookup # overlay
            worker_id = get_next_core()
            qin1.attach_task(wid=worker_id)

        for i in range(count_vhost_ports):
            ip = "192.168.1.{}".format(i + 2)
            print("pipline ip in IP Look UP: ", ip)
            iplookup.add(prefix=ip, prefix_len=32, gate=i)
            broker.add(prefix=ip, prefix_len=32, gate=i) # overlay
            qout1 = BPQOut(port=vhost_ports[i], qid=0)
            worker_id = get_next_core()
            qout1.attach_task(wid=worker_id)
            lock_less_q = Queue()
            iplookup:i -> lock_less_q -> qout1
            broker:i -> egress_out_collection[i] # overlay
            # worker_id = get_next_core()
            lock_less_q.attach_task(wid=worker_id)
            

        iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=count_vhost_ports) 
        iplookup:count_vhost_ports -> Sink()
