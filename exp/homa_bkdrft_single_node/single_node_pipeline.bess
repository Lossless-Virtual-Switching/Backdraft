import os
import json
import subprocess

config = json.load(open('/tmp/.pipeline_config.json'))

# count_cores = config['count_core']
count_queue = config['count_queue']
# pci = config['pci_address']
client_count = config['client_count']
server_count = config['server_count']


_vhost_counter = 0
def new_vport(name):
    global _vhost_counter
    socket = '/tmp/vhost_{}.sock'.format(name)
    vdev = 'eth_vhost{},iface={},queues={}'.format(_vhost_counter, socket, count_queue)
    _vhost_counter += 1

    if os.path.exists(socket):
        subprocess.call('sudo rm {}'.format(socket), shell=True)

    port = PMDPort(name=name,
        vdev=vdev,
        num_inc_q=count_queue,
        num_out_q=count_queue)
    return port


# generating vhost port:
client_ports = []
server_ports = []
for i in range(client_count):
    name = 'client_port_{}'.format(i)
    port = new_vport(name)
    client_ports.append(port)

for i in range(server_count):
    name = 'server_port_{}'.format(i)
    port = new_vport(name)
    server_ports.append(port)

# Assign cores to Bess
bess.add_worker(0, 0)
bess.add_worker(1, 1)

# xxx(clients -> vlan_pop -> hash_lb -> server)xxx
# clients -> hash_lb -> server
# server ->  vlan_pop -> ip_lookup -> client_i
server_gates = tuple(range(server_count))
hs = HashLB(mode='l3', gates=server_gates)
client_vlan_pop = VLANPop()
server_vlan_pop = VLANPop()
iplookup = IPLookup()

# Monitoring the throughput in the measure_pps module
client_vlan_pop -> MeasurePPS() -> hs
server_vlan_pop -> iplookup

for index,port in enumerate(client_ports):
    qin = BPQInc(port=port, qid=0)
    qin.attach_task(wid=0)
    qin -> client_vlan_pop
    # qin -> hs

    qout = BPQOut(port=port, qid=0)
    qout.attach_task(wid=1)
    ip = "192.168.1.{}".format(index + 2)
    print(ip, index)
    iplookup.add(prefix=ip, prefix_len=32, gate=index)
    iplookup:index -> qout

for i, port in enumerate(server_ports):
    qout = BPQOut(port = port, qid = 0)
    hs:i -> qout
    qout.attach_task(wid=0)

    qin = BPQInc(port=port, qid=0)
    qin -> server_vlan_pop
    qin.attach_task(wid=1)

iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=client_count)
iplookup:client_count -> Sink()

