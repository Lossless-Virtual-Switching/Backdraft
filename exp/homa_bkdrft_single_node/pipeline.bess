import os
import json
import subprocess

config = json.load(open('/tmp/.pipeline_config.json'))

count_cores = config['count_core']
count_queue = config['count_queue']
pci = config['pci_address']
count_vhost_ports = config['vhost_port_count']
server = config['server']

qids = [0,]
bp = True
cdq = False
overlay =False
pfq=False
rate_limiting=True
init_rate=10000

# drop_prob = 0 if os.environ.get("DROP"):
#   drop_prob = float(os.environ.get("DROP"))
#   print("Drop Prob {}".format(drop_prob))


# generating vhost port:
vhost_ports = []
for i in range(count_vhost_ports):
    name = 'port_{}'.format(i)
    socket = '/tmp/vhost_{}.sock'.format(i)
    vdev = 'eth_vhost{},iface={},queues={}'.format(i, socket, count_queue)

    if os.path.exists(socket):
        subprocess.call('sudo rm {}'.format(socket), shell=True)

    port = PMDPort(name=name,
        vdev=vdev,
        num_inc_q=count_queue,
        num_out_q=count_queue)
    vhost_ports.append(port)

bess.add_worker(0, 0)
bess.add_worker(1, 1)


# PCI port
print(pci, count_queue)
pci_port = PMDPort(
    pci=pci,
    num_inc_q=count_queue,
    num_out_q=count_queue,
    rate_limiting=rate_limiting,
    rate=init_rate)


# HOMA side uses normal Bess components
# NIC side uses Backdraft components
if server:
    # Egress
    merger = Merge()
    for index,i in enumerate(vhost_ports):
        qin1 = QueueInc(port=i, qid=0)
        qin1.attach_task(wid=0)
        qin1 -> merger

    pci_port_qout = BKDRFTQueueOut(port=pci_port, qid=qids, backpressure=bp,
        lossless=bp, cdq=cdq, per_flow_buffering=pfq, overlay=overlay,
        mname='to_nic')
    merger -> pci_port_qout
    # Ingress
    hs = HashLB(mode='l3', gates=range(count_vhost_ports))
    pci_port_qinc = BKDRFTQueueInc(port=pci_port, qid=qids, backpressure=bp,
        cdq=cdq, overlay=overlay)
    pci_port_qinc ->  hs
    pci_port_qinc.attach_task(wid=1)
    for i in range(count_vhost_ports):
        qout1 = QueueOut(port=vhost_ports[i], qid=0)
        hs:i -> qout1
else:
    # client
    # Egress
    merger = Merge()
    for index, i in enumerate(vhost_ports):
        qin1 = QueueInc(port=i, qid=0)
        qin1.attach_task(wid=0)
        qin1 -> merger

    pci_port_qout = BKDRFTQueueOut(port=pci_port, qid=qids, backpressure=bp,
        lossless=bp, cdq=cdq, per_flow_buffering=pfq, overlay=overlay,
        mname='to_nic')
    merger -> pci_port_qout
    # Ingress
    iplookup = IPLookup()
    pci_port_qinc = BKDRFTQueueInc(port=pci_port, qid=qids, backpressure=bp,
        cdq=cdq, overlay=overlay)
    pci_port_qinc -> iplookup
    pci_port_qinc.attach_task(wid=1)

    for i in range(count_vhost_ports):
        ip = "192.168.1.{}".format(i + 2)
        print("pipline ip in IP Look UP: ", ip)
        iplookup.add(prefix=ip, prefix_len=32, gate=i)
        qout1 = QueueOut(port=vhost_ports[i], qid=0)
        iplookup:i -> qout1

    iplookup.add(prefix="0.0.0.0", prefix_len=0, gate=count_vhost_ports)
    iplookup:count_vhost_ports -> Sink()

