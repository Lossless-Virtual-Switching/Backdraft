import os
import subprocess


# remove all the sockets
subprocess.run('sudo rm -rf /tmp/*.sock -f', shell=True)


pci_addr = os.environ.get('PCI', '41:00.0')
mac = '1c:34:da:41:cf:cc'
memcached_ip = '192.168.1.50'
udp_ip = '192.168.1.51'

qsize = 4096
count_queue = 1
# add worker to vswitch
count_vsw_cores = 2
for i in range(count_vsw_cores):
    bess.add_worker(i, i * 2)
print("Count VSwitch Cores:", count_vsw_cores)

_next_wid = -1
def next_wid():
    """
    Helper function for assigning worker thread
    """
    global _next_wid
    _next_wid += 1
    _next_wid = _next_wid % count_vsw_cores
    return _next_wid

# ===================================================================
#                      Pipeline Configuration
# ===================================================================

# How many vhost
count_progs = 2

vhosts = []
qouts = []
qincs = []
for i in range(count_progs):
    name = 'ex_vhost{0}'.format(i)
    vdev = 'eth_vhost{0},iface=/tmp/{1}.sock,queues={2}'.format(i, name, count_queue)
    h = PMDPort(name=name, vdev=vdev, rate_limiting=False, rate=100000,
            num_inc_q=count_queue, num_out_q=count_queue, size_inc_q=qsize,
            size_out_q=qsize)
    vhosts.append(h)

    # Per host pipeline elements
    qo = QueueOut(port = h, qid = 0)
    # qo.attach_task(wid=1)
    qouts.append(qo)

    qi = QueueInc(port = h, qid=0)
    qi.attach_task(wid=1)
    qincs.append(qi)

# Connect to the NIC
nic = PMDPort(pci = pci_addr, num_inc_q=count_queue, num_out_q=count_queue,
        size_inc_q=qsize, size_out_q=qsize)
nic_qinc = QueueInc(port=nic, qid=0)
nic_qout = QueueOut(port=nic, qid=0)
nic_qinc.attach_task(wid=0)
# nic_qout.attach_task(wid=0)

q_tx = Queue()

#
# NIC -> [arp responder] -> [iplookup] -> [memcached or udp server]
# [memcached or udp server] -> NIC
#


arp = ArpResponder()
arp.add(ip=memcached_ip, mac_addr=mac)
arp.add(ip=udp_ip, mac_addr=mac)

ip = IPLookup()
ip.add(prefix=memcached_ip, prefix_len=32, gate=1)
ip.add(prefix=udp_ip, prefix_len=32, gate=2)

nic_qinc -> arp
arp:1 -> ip
ip:1 -> qouts[0]
ip:2 -> qouts[1]

arp:0 -> q_tx
qincs[0] -> q_tx
qincs[1] -> q_tx
q_tx -> nic_qout
