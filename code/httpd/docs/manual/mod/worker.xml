<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision: 1414094 $ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="worker.xml.meta">
<name>worker</name>
<description>Multi-Processing Module implementing a hybrid
    multi-threaded multi-process web server</description>
<status>MPM</status>
<sourcefile>worker.c</sourcefile>
<identifier>mpm_worker_module</identifier>

<summary>
    <p>This Multi-Processing Module (MPM) implements a hybrid
    multi-process multi-threaded server. By using threads to serve
    requests, it is able to serve a large number of requests with
    fewer system resources than a process-based server. However, it
    retains much of the stability of a process-based server by
    keeping multiple processes available, each with many threads.</p>

    <p>The most important directives used to control this MPM are
    <directive module="mpm_common">ThreadsPerChild</directive>, which
    controls the number of threads deployed by each child process and
    <directive module="mpm_common">MaxRequestWorkers</directive>, which
    controls the maximum total number of threads that may be
    launched.</p>
</summary>
<seealso><a href="../bind.html">Setting which addresses and ports Apache HTTP Server uses</a></seealso>

<section id="how-it-works"><title>How it Works</title>
    <p>A single control process (the parent) is responsible for launching
    child processes. Each child process creates a fixed number of server
    threads as specified in the <directive
    module="mpm_common">ThreadsPerChild</directive> directive, as well
    as a listener thread which listens for connections and passes them
    to a server thread for processing when they arrive.</p>

    <p>Apache HTTP Server always tries to maintain a pool of <dfn>spare</dfn> or
    idle server threads, which stand ready to serve incoming
    requests. In this way, clients do not need to wait for a new
    threads or processes to be created before their requests can be
    served. The number of processes that will initially launch is
    set by the <directive module="mpm_common">StartServers</directive>
    directive. During operation, the server assesses the total number
    of idle threads in all processes, and forks or kills processes to
    keep this number within the boundaries specified by <directive
    module="mpm_common">MinSpareThreads</directive> and <directive
    module="mpm_common">MaxSpareThreads</directive>. Since this
    process is very self-regulating, it is rarely necessary to modify
    these directives from their default values. The maximum number of
    clients that may be served simultaneously (i.e., the maximum total
    number of threads in all processes) is determined by the
    <directive module="mpm_common">MaxRequestWorkers</directive> directive.
    The maximum number of active child processes is determined by
    the <directive module="mpm_common">MaxRequestWorkers</directive>
    directive divided by the <directive module="mpm_common">
    ThreadsPerChild</directive> directive.</p>

    <p>Two directives set hard limits on the number of active child
    processes and the number of server threads in a child process,
    and can only be changed by fully stopping the server and then
    starting it again.  <directive module="mpm_common">ServerLimit
    </directive> is a hard limit on the number of active child
    processes, and must be greater than or equal to the
    <directive module="mpm_common">MaxRequestWorkers</directive>
    directive divided by the <directive module="mpm_common">
    ThreadsPerChild</directive> directive.
    <directive module="mpm_common">ThreadLimit</directive> is a hard
    limit of the number of server threads, and must be greater than
    or equal to the <directive
    module="mpm_common">ThreadsPerChild</directive> directive.</p>

    <p>In addition to the set of active child processes, there may
    be additional child processes which are terminating, but where at
    least one server thread is still handling an existing client
    connection.  Up to <directive
    module="mpm_common">MaxRequestWorkers</directive> terminating processes
    may be present, though the actual number can be expected to be
    much smaller.  This behavior can be avoided by disabling the
    termination of individual child processes, which is achieved using
    the following:</p>

    <ul>
      <li>set the value of <directive module="mpm_common">
      MaxConnectionsPerChild</directive> to zero</li>

      <li>set the value of <directive module="mpm_common">
      MaxSpareThreads</directive> to the same value as
      <directive module="mpm_common">MaxRequestWorkers</directive></li>
    </ul>

    <p>A typical configuration of the process-thread controls in
    the <module>worker</module> MPM could look as follows:</p>

    <highlight language="config">
ServerLimit         16
StartServers         2
MaxRequestWorkers  150
MinSpareThreads     25
MaxSpareThreads     75
ThreadsPerChild     25
    </highlight>

    <p>While the parent process is usually started as <code>root</code>
    under Unix in order to bind to port 80, the child processes and threads
    are launched by the server as a less-privileged user. The <directive
    module="mod_unixd">User</directive> and <directive
    module="mod_unixd">Group</directive> directives are used to set
    the privileges of the Apache HTTP Server child processes. The child processes
    must be able to read all the content that will be served, but
    should have as few privileges beyond that as possible. In
    addition, unless <program>suexec</program> is used,
    these directives also set the privileges which will be inherited
    by CGI scripts.</p>

    <p><directive module="mpm_common">MaxConnectionsPerChild</directive>
    controls how frequently the server recycles processes by killing
    old ones and launching new ones.</p>

    <p>This MPM uses the <code>mpm-accept</code> mutex to serialize
    access to incoming connections when subject to the thundering herd
    problem (generally, when there are multiple listening sockets).
    The implementation aspects of this mutex can be configured with the
    <directive module="core">Mutex</directive> directive.  The <a
    href="../misc/perf-tuning.html">performance hints</a>
    documentation has additional information about this mutex.</p>
</section>

<directivesynopsis location="mpm_common"><name>CoreDumpDirectory</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>EnableExceptionHook</name>
</directivesynopsis>
<directivesynopsis location="mod_unixd"><name>Group</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>PidFile</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>Listen</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ListenBacklog</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>MaxRequestWorkers</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>MaxMemFree</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>MaxConnectionsPerChild</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>MaxSpareThreads</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>MinSpareThreads</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ScoreBoardFile</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ReceiveBufferSize</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>SendBufferSize</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ServerLimit</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>StartServers</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ThreadLimit</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ThreadsPerChild</name>
</directivesynopsis>
<directivesynopsis location="mpm_common"><name>ThreadStackSize</name>
</directivesynopsis>
<directivesynopsis location="mod_unixd"><name>User</name>
</directivesynopsis>

</modulesynopsis>
