<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.fr.xsl"?>
<!-- English Revision : 1174718 -->
<!-- French translation : Lucien GENTIS -->
<!-- Reviewed by : Vincent Deffontaines -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_lbmethod_bybusyness.xml.meta">

<name>mod_lbmethod_bybusyness</name>
<description>Algorithme de planification avec répartition de charge de
l'attribution des requêtes en attente pour le module
<module>mod_proxy_balancer</module></description>
<status>Extension</status>
<sourcefile>mod_lbmethod_bybusyness.c</sourcefile>
<identifier>lbmethod_bybusyness_module</identifier>
<compatibility>Dissocié de <module>mod_proxy_balancer</module> depuis la
version 2.3</compatibility>

<summary>
<p>Ce module ne fournit pas lui-même de directive de configuration. Il
nécessite les services de <module>mod_proxy_balancer</module>, et
fournit la méthode de répartition de charge <code>bybusyness</code>.</p>
</summary>
<seealso><module>mod_proxy</module></seealso>
<seealso><module>mod_proxy_balancer</module></seealso>

<section id="busyness">

    <title>Algorithme d'attribution des requêtes en attente</title>

    <p>Activé via <code>lbmethod=bybusyness</code>, ce planificateur
    surveille le nombre de requêtes assignées à chaque processus worker
    à l'instant présent. Une nouvelle requête est automatiquement
    assignée au processus worker auquel est assigné le plus petit nombre de
    requêtes. Ceci s'avère utile dans le cas où les
    processus worker mettent en file d'attente les requêtes entrantes
    indépendamment d'Apache, et permet de s'assurer que la longueur des
    files reste raisonnable, et qu'une requête est toujours assignée au
    processus worker qui sera à même de la servir le plus
    rapidement et avec une latence réduite.</p>

    <p>Si plusieurs processus worker s'avèrent les moins chargés, le
    choix d'un de ces derniers est effectué à partir des statistiques
    (et des estimations de charges) qu'utilise la méthode de décompte
    des requêtes. Au fil du temps, la distribution des tâches finit par
    ressembler à celle de <code>byrequests</code> (tel qu'implémenté par
    <module>mod_lbmethod_byrequests</module>).</p>

</section>

</modulesynopsis>
