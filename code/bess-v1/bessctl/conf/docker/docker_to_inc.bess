import os
import subprocess

count_queue = 1
count_vhost = 2
q_size = 64
pci = os.environ.get('PCI', '7:00.1')

socket_dir='/tmp'
sockets = [os.path.join(socket_dir, 'tmp_vhost{}.sock'.format(i))
                            for i in range(count_vhost)]
vdevs = ["eth_vhost{},iface={},queues={}".format(i, socket, count_queue)
                            for i, socket in enumerate(sockets)]
print(vdevs)

for socket in sockets:
    if os.path.isfile(socket):
      subprocess.call('sudo rm {}'.format(socket), shell=True)
    elif os.path.isdir(socket):
      subprocess.call('sudo rm -r {}'.format(socket), shell=True)

pmd_ports = []
for i, vdev in enumerate(vdevs):
    port = PMDPort(name="tmp_vhost{}".format(i),
            vdev=vdev,
            num_inc_q = count_queue,
            num_out_q = count_queue,
            size_inc_q= q_size,
            size_out_q= q_size)
    pmd_ports.append(port)

nic = PMDPort(pci = pci,
        num_inc_q=count_queue,
        num_out_q=count_queue)


# Pipeline
default_ip_gate = 128
arp_resp_gate = 22
host_ip = '192.168.1.3'
host_mac = '98:f2:b3:cc:a2:e1'

# List of gates to broadcast on when an unknown packet is received
repeat_gates =  [i+1 for i in range(count_vhost)]
repeat_gates.append(arp_resp_gate)

merger = Merge()  # merge senders to NIC
iplookup = IPLookup()  # Send packets to servers based on ip
arp_resp = ArpResponder()  # Answer current systems arp
iplookup.add(prefix='0.0.0.0', prefix_len=0, gate=default_ip_gate)
arp_resp.add(ip=host_ip, mac_addr=host_mac)
replicate = Replicate(gates=repeat_gates)

iplookup:default_ip_gate -> replicate
for i, port in enumerate(pmd_ports):
    PortInc(port=port) -> merger
    out = PortOut(port=port)
    tmp_merge = Merge()  # merge two ip lookup connections
    ip_addr = '10.1.1.{}'.format(i+1)
    iplookup.add(prefix=ip_addr, prefix_len=32, gate=i)
    iplookup:i -> tmp_merge
    replicate:(i+1) -> tmp_merge
    tmp_merge -> out
merger -> PortOut(port=nic)
PortInc(port=nic) -> iplookup

# Answering the host arp request
replicate:arp_resp_gate -> arp_resp
arp_resp -> merger

