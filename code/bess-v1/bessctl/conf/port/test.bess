import os
import subprocess
import scapy.all as scapy
import time
import json
import sys


pkt_size = int($SN_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)

#use scapy to build a packet template
eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='10.0.0.1', dst='10.0.0.2')   # dst IP is overwritten
tcp = scapy.TCP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)]
pkt = eth/ip/tcp/payload
pkt_data = str(pkt)


fg::FlowGen(template=pkt_data, pps=7e6, flow_duration = 5.0, 
#fg::FlowGen(template=pkt_data, pps=8e6, flow_rate = 10, flow_duration = 5.0, 
arrival='uniform', duration='uniform', quick_rampup=True, ip_src_range=100000)


count_ports = 1

my_vhost0 = PMDPort(name='my_vhost0',
vdev='net_vhost0,iface=/home/alireza/my_vhost0.sock,queues={}'.format(count_ports),
num_inc_q=count_ports, num_out_q=count_ports, size_inc_q=64, size_out_q=64,
rate_limiting = True, rate = 2)

my_vhost1 = PMDPort(name='my_vhost1',
vdev='net_vhost1,iface=/home/alireza/my_vhost1.sock,queues={}'.format(count_ports),
num_inc_q=count_ports, num_out_q=count_ports, size_inc_q=64, size_out_q=64,
rate_limiting = False, rate = 2)

# for i in range(count_ports):
fg -> QueueOut(port=my_vhost1.name, qid=0)
qi::QueueInc(port=my_vhost0.name, qid=0) -> Sink() 

